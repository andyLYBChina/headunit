syntax = "proto2";

package info.anodsplace.headunit.aap.protocol.proto;
option java_outer_classname = "Control";

import "common.proto";
import "media.proto";
import "sensors.proto";

enum ControlMsgType
{
    MEDIADATA = 0x00;
    CODECDATA = 0x01;
    VERSIONRESPONSE = 0x02;
    HANDSHAKE = 0x03;
    SERVICEDISCOVERYREQUEST = 0x05;
    SERVICEDISCOVERYRESPONSE = 0x06;
    CHANNELOPENREQUEST = 0x07;
    CHANNELOPENRESPONSE = 0x08;
    PINGREQUEST = 0x0B;
    PINGRESPONSE = 0x0C;
    NAVFOCUSREQUESTNOTIFICATION = 0x0D;
    NAVFOCUSRNOTIFICATION = 0x0E;
    BYEYEREQUEST = 0x0F;
    BYEYERESPONSE = 0x10;
    VOICESESSIONNOTIFICATION = 0x11;
    AUDIOFOCUSREQUESTNOTFICATION = 0x12;
    AUDIOFOCUSNOTFICATION = 0x13;
}

enum BluetoothPairingMethod
{
    METHOD_1 = 1;
    A2DP = 2;
    METHOD_3 = 3;
    HFP = 4;
}

message Service
{
    message SensorSourceService
    {
        message Sensor
        {
            required SensorType type = 1;
        }
        repeated Sensor sensors = 1;
    }

    message MediaSinkService
    {
        message VideoConfiguration
        {
            enum VideoCodecResolutionType
            {
                _800x480 = 1;
                _1280x720 = 2;
                _1920x1080 = 3;
            }

            enum VideoFrameRateType
            {
                _30 = 1;
                _60 = 2;
            }
            required VideoCodecResolutionType codec_resolution = 1;
            required VideoFrameRateType frame_rate = 2;
            required uint32 margin_width = 3;
            required uint32 margin_height = 4;
            required uint32 density = 5;
            optional uint32 decoder_additional_depth = 6;
        }

        required MediaCodecType available_type = 1;
        optional AudioStreamType audio_type = 2;
        repeated AudioConfiguration audio_configs = 3;
        repeated VideoConfiguration video_configs = 4;
        optional bool available_while_in_call = 5;
    }

    message InputSourceService
    {
        message TouchConfig
        {
            required uint32 width = 1;
            required uint32 height = 2;
        }
        repeated uint32 keycodes_supported = 1;
        optional TouchConfig touchscreen = 2;
        optional TouchConfig touchpad = 3;
    }

    message MediaSourceService
    {
        required MediaCodecType type = 1;
        required AudioConfiguration audio_config = 2;
        optional bool available_while_in_call = 3;
    }

    message BluetoothService
    {
        required string car_address = 1;
        repeated BluetoothPairingMethod supported_pairing_methods = 2;
    }

    message NavigationStatusService
    {
        message ImageOptions
        {
            required int32 width = 1;
            required int32 height = 2;
            required int32 colour_deth_bits = 3;
        }
        enum ClusterType
        {
            CustomImageSupported = 1;
            ImageCodesOnly = 2;
        }
        required uint32 minimum_interval_ms = 1;
        required ClusterType type = 2;
        optional ImageOptions image_options = 3;
    }

    message MediaPlaybackStatusService
    {
    }

    enum PhoneStatus_State {
       InCall = 1;
       OnHold = 2;
       HangingUp = 3;
       Incoming = 4;
       Muted = 5;
       Conferenced = 6;
    }

    message PhoneStatus_Call
    {
        optional PhoneStatus_State state = 1;
        //in seconds
        optional uint32 call_duration_seconds = 2;
        optional string caller_number = 3;
        optional string caller_id = 4;
        optional string caller_number_type = 5;
        optional bytes thumbnail = 6;

        // caller_number
        // required uint32 caller_id
        // caller_number_type
        // optional bytes caller_thumbnail
        // required PhoneStatus_State phone_state
        // required int32 call_duration_seconds
    }

    message PhoneStatus_Input
    {
        optional string caller_number = 1;
        optional string caller_id = 2;
    }

    message PhoneStatusService
    {
        repeated PhoneStatus_Call calls = 1;
        optional uint32 signal_strength = 2;
    }

    optional PhoneStatusService phone_status_service = 10;

    message VendorExtensionService
    {
        optional string name = 1;
        repeated string package_white_list = 2;
        optional bytes data = 3;
    }

    message GenericNotificationService
    {
    }

    required uint32 id = 1;
    optional SensorSourceService sensor_source_service = 2;
    optional MediaSinkService media_sink_service = 3;
    optional InputSourceService input_source_service = 4;
    optional MediaSourceService media_source_service = 5;
    optional BluetoothService bluetooth_service = 6;
    optional NavigationStatusService navigation_status_service = 8;
    optional MediaPlaybackStatusService media_playback_service = 9;
    optional VendorExtensionService vendor_extension_service = 12;
    optional GenericNotificationService generic_notification_service = 13;
    //radio_service = 7
    //media_browser_service=11
}

message ServiceDiscoveryRequest
{
    required string phone_name = 4;
    required string phone_brand = 5;
}

message ServiceDiscoveryResponse
{
    repeated Service services = 1;
    required string make = 2;
    required string model = 3;
    required string year = 4;
    required string vehicle_id = 5;
    required bool driver_position = 6;
    required string head_unit_make = 7;
    required string head_unit_model = 8;
    required string head_unit_software_build = 9;
    required string head_unit_software_version = 10;
    required bool can_play_native_media_during_vr = 11;
    optional bool hide_projected_clock = 12;
}

message ChannelOpenRequest
{
    required int32 priority = 1;
    required int32 service_id = 2;
}

message ChannelOpenResponse
{
    required MessageStatus status = 1;
}

message PingRequest
{
    required int64 timestamp = 1;
    optional int32 bug_report = 2;
}

message PingResponse
{
    required int64 timestamp = 1;
}

message ByeByeRequest
{
    enum ByeByeReason
    {
        QUIT = 1;
    }
    required ByeByeReason reason = 1;
}

message ByeByeResponse
{

}

message VoiceSessionNotification
{
    enum VoiceSessionStatus
    {
        VOICE_STATUS_START = 1;
        VOICE_STATUS_STOP = 2;
    }
    required VoiceSessionStatus status = 1;
}

message AudioFocusRequestNotification
{
    enum AudioFocusRequestType
    {
        NONE = 0;
        GAIN = 1;
        GAIN_TRANSIENT = 2;
        GAIN_TRANSIENT_MAY_DUCK = 3;
        RELEASE = 4;
    }
    optional AudioFocusRequestType request = 1;
}

message AudioFocusNotification
{
    enum AudioFocusStateType
    {
        STATE_GAIN = 1;
        STATE_GAIN_TRANSIENT = 2;
        STATE_LOSS = 3;
        STATE_LOSS_TRANSIENT_CAN_DUCK = 4;
        STATE_LOSS_TRANSIENT = 5;
        STATE_GAIN_MEDIA_ONLY = 6;
        STATE_GAIN_TRANSIENT_GUIDANCE_ONLY = 7;
    }
    required AudioFocusStateType focus_state = 1;
    optional bool unsolicited = 2;
}


enum NavFocusType
{
    NAV_FOCUS_1 = 1;
    NAV_FOCUS_2 = 2;
}

message NavFocusRequestNotification
{
    optional NavFocusType focus_type = 1;
}

message NavFocusNotification
{
    required NavFocusType focus_type = 1;
}

message GenericNotificationRequest
{
    required string id = 1;
    optional string text = 2;
    optional string icon = 3;
}

message GenericNotification
{
    required string id = 1;
    required bool handled = 2;
}

message GenericNotificationsStart
{
}

message GenericNotificationsStop
{
}

message BluetoothPairingRequest
{
    required string phone_address = 1;
    required BluetoothPairingMethod pairing_method = 2;
}

message BluetoothPairingResponse
{
    enum BluetoothPairingStatus
    {
        NONE = 0;
        OK = 1;
        FAIL = 2;
    }
    optional bool already_paired = 1;
    optional BluetoothPairingStatus status = 2;
}

message BluetoothAuthData
{
    optional string data = 1;
}